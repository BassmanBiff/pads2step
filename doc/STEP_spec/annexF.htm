<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>ISO 10303-21</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<p class=pagehead>ISO 10303-21:2016(E)</p>

<H2 CLASS="annex-clause"><A NAME="clause-F"></A>Annex F<BR>(normative)<BR><BR>ECMAScript binding for the anchor section</H2>

<H3><A NAME="clause-F-1"></A>F.1  Introduction</H3>

<P>The binding described in this annex maps the anchor section of an
exchange structure to ECMAScript objects.</P>

<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ECMAScript is the term used in
ISO/IEC 16262 for the language more commonly known as JavaScript.

<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The anchor items may refer to
data instances in the body of the exchange structure.

<p>The binding enables the materialization of the data referenced by the
anchors as objects that can be processed in an application.</p>

<p>The binding is defined as a set of functions that operate on a
context defined by an object called the P21 object.</p>



<H3><A NAME="clause-F-2"></A>F.2 Required properties of the P21 object</H3>

<p>The P21 object delivered by the functions that read an exchange
structure shall have one property for each anchor in the exchange
structure. This property shall have the same name as the anchor.</p>

<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The following code uses a
synchronous read function to read an exchange structure and access an
anchor called geometry.

<PRE CLASS="example">
function read_model_geometry()
{
    var model = read_model("example.p21");
    return model.geometry;
} 
</PRE>

<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The read_model function is only an
example. Implementations may prefer to use asynchronous read
functionality to get better performance.

<p>When an application reads an exchange structure it shall determine
what anchors are expected from the <b>file_name.name</b> attribute of
the header section.  If two exchange structures have the
same <b>file_name.name</b> then each anchor with the same name shall
have the same representation.

<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For example, if
the <b>filename.name</b> attribute has the value "workingstep.paths"
then the exchange structure may be expected to have anchors
representing toolpaths.


<H3><A NAME="clause-F-3"></A>F.3 Anchor value mappings</H3>
<p>Each anchor shall have properties with the following descriptions.

<ul>
<li>A property called &quot;$value&quot; that describes the value of
the anchor encoded as described below.

<li>Each tag of the anchor shall be an additional property with the
name of the tag preceded by a <em>dollar sign</em> (&quot;$&quot) and
encoded as described below.
</ul>



<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.first.$value = new P21.Integer (10);&quot; is equivalent
to the following exchange structure code.

<PRE CLASS="example">
ANCHOR;
&lt;first> = 10;
ENDSEC;
</PRE>

<P CLASS="example">
EXAMPLE 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The two ECMAScript expressions
&quot;model.second.$value = new P21.Real (10);&quot; and
&quot;model.second.$third = new P21.String ("10");&quot; are
equivalent to the following exchange structure code.

<PRE CLASS="example">
ANCHOR;
&lt;second> = 10. {third:'10'};
ENDSEC;
</PRE>


<p>Each anchor value shall be represented as a P21.Wrapper object.
Each instance shall be specialized to one of the subtypes of
P21.Wrapper listed below. The P21.Wrapper object shall have a method
called toP21String() in addition to the toString() and valueOf()
methods prescribed by ECMAScript.

<p>The toP21String() method shall return the ECMAScript string value
'$' if the instance has not been specialized.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In ECMAScript the underlying value
of a wrapper is accessed implicitly when necessary using the valueOf()
method, and a printable representation is accessed implicitly when
necessary using the toString() method.


<H4><A NAME="clause-F-3-1"></A>F.3.1  integer mapping</H4>

<p>A property defined by an INTEGER shall be mapped to a P21.Integer
object. The valueOf() method shall return the integer literal
represented as an ECMAScript number. The toString() method shall
return the ECMAScript string representation of the ECMAScript number.
The toP21String() method shall return a string representation of the
ECMAScript number that meets the requirements defined by this part of
ISO 10303 for an integer literal.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Multiple examples in this annex
assume that a P21 object has been read and assigned to an ECMAScript
variable called model.


<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.Integer (10);&quot; is equivalent
to the following exchange structure code.

<PRE CLASS="example">
ANCHOR;
..
&lt;example> = 10;
..
ENDSEC;
</PRE>

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There is no integer type in
ECMAScript. All numbers have the type number.

<H4><A NAME="clause-F-3-2"></A>F.3.2  real mapping</H4>

<p>A property defined by a REAL shall be mapped to a P21.Real
object. The valueOf() method shall return the real literal represented
as an ECMAScript number. The toString() method shall return the
ECMAScript string representation of the ECMAScript number.  The
toP21String() method shall return a string representation of the
ECMAScript number that meets the requirements defined by this part of
ISO 10303 for a real literal.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.Real (10);&quot; is equivalent to
the following exchange structure code.

<PRE CLASS="example">
ANCHOR;
..
&lt;example> = 10.;
..
ENDSEC;
</PRE>

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This part of ISO 10303 requires the
representation of real numbers to include a &quot;.&quot;.


<H4><A NAME="clause-F-3-3"></A>F.3.3  string mapping</H4>

<p>A property defined by a STRING shall be mapped to a P21.String
object.  The valueOf() method shall return the string literal without
the first and last &quot;'&quot; characters.  The toString() method
shall return the same result as the valueOf() method.  The
toP21String() method shall return a string that meets the requirements
defined by this part of ISO 10303 for a string literal. This string
shall include the first and last &quot;'&quot; characters.


<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.String ('This is a
message');&quot; is equivalent to the following exchange structure
code.

<PRE CLASS="example">
ANCHOR;
..
&lt;example> = 'This is a message';
..
ENDSEC;
</PRE>


<H4><A NAME="clause-F-3-4"></A>F.3.4  enumeration mapping</H4>

<p>A property defined by an ENUMERATION shall be mapped to a
P21.Enumeration object. The valueOf() method shall return the
ECMAScript value true if the exchange structure value is
&quot;.T.&quot, the ECMAScript value false if the exchange structure
value is &quot;.F.&quot;, and the enumeration represented as an
ECMAScript string with the first and final &quot;.&quot; characters
omitted otherwise. The toString() method shall return the ECMAScript
result of applying the toString() method to the result of the
valueOf() method.  The toP21String () method shall return the
enumeration string defined by this part of ISO 10303.

<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.Enumeration ('RED');&quot; is
equivalent to the following exchange structure code.

<PRE CLASS="example">
ANCHOR;
..
&lt;example> = .RED.;
..
ENDSEC;
</PRE>

<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.Enumeration (true);&quot; is
equivalent to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = .T.;
..
ENDSEC;
</PRE>


<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The EXPRESS BOOLEAN and LOGICAL
types represent true and false as &quot;.T.&quot; and
&quot;.F.&quot;. In principle other enumerations can also use these
values. If so the mapping may produce unexpected results but no
information will be lost.

<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript environment
implicitly converts null values to false in boolean expressions. This
would be an issue for OPTIONAL BOOLEAN values in an SDAI
implementation but is the expected behavior for this part of ISO
10303.

<H4><A NAME="clause-F-3-5"></A>F.3.5  binary mapping</H4>

<p>A property defined by a BINARY shall be mapped to a P21.Binary
object. The valueOf() method shall return the binary literal
represented as an ECMAScript string with the first and last quote
characters omitted.  The toString() method shall produce the same
result. The toP21String() method shall produce a string with the first
and last quote characters in place.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.Binary
('0123456789ABCDEF');&quot; is equivalent to the following exchange
structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = "0123456789ABCDEF";
..
ENDSEC;
</PRE>


<H4><A NAME="clause-F-3-6"></A>F.3.6 entity instance name mapping</H4>

<p>A property that is defined by a ENTITY_INSTANCE_NAME shall be
mapped to a P21.EID object.  The valueOf() method shall return an
encoding of the entity addressed by the entity instance name or NULL.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An anchor defined by an entity
should be given an application specific ECMAScript mapping.


<p>The toString() method shall produce the entity instance name
without the initial &quot;#&quot; character encoded as an ECMAScript
string.  The toP21String() method shall produce a string with the
encoding described by this part of ISO 10303 that includes the initial
&quot;#&quot; character.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.EID ('20');&quot; is equivalent
to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = #20;
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-7"></A>F.3.7 value instance name mapping</H4>

<p>A property defined by an VALUE_INSTANCE_NAME shall be mapped to a
P21.VID object.  The valueOf() method shall return an encoding for the
value addressed by the value instance name.

<p>The toString() method shall produce the value instance name without
the initial &quot;@&quot; character encoded as an ECMAScript string.
The toP21String() method shall produce a string with the encoding
described by this part of ISO 10303 that includes the initial
&quot;@&quot; character.


<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.VID ('20');&quot; is equivalent
to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = @20;
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-8"></A>F.3.8 constant instance name mapping</H4>

<p>A property that is defined by a CONSTANT_ENTITY_NAME shall be
mapped to a P21.CIN object.  The valueOf() method shall return an
encoding of the entity addressed by the entity instance name or NULL.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For an anchor defined by a EXPRESS
constant the name of the constant is probably more useful than the
value.


<p>The toString() method shall produce the entity instance name
without the initial &quot;#&quot; character encoded as an ECMAScript
string.  The toP21String() method shall produce a string with the
encoding described by this part of ISO 10303 that includes the initial
&quot;#&quot; character.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.CIN ('INCH');&quot; is equivalent
to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = #INCH;
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-9"></A>F.3.9 constant value name mapping</H4>

<p>A property defined by an CONSTANT_VALUE_NAME shall be mapped to a
P21.CVN object.  The valueOf() method shall return an encoding for the
value addressed by the constant value name.

<p>The toString() method shall produce the value instance name without
the initial &quot;@&quot; character encoded as an ECMAScript string.
The toP21String() method shall produce a string with the encoding
described by this part of ISO 10303 that includes the initial
&quot;@&quot; character.


<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.CVN ('PI');&quot; is equivalent
to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = @PI;
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-10"></A>F.3.10 null value mapping</H4>

<p>A property defined by a null value (&quot;$&quot;) shall be mapped
to an ECMAScript null.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = null;&quot; is equivalent to the
following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = $;
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-11"></A>F.3.11 anchor item list mapping</H4>

<p>A property that is defined by a ANCHOR_ITEM_LIST shall be mapped to
a P21.List object. The valueOf() method shall return an ECMAScript
array with each member of the list represented using the encoding
prescribed for the corresponding valueOf() method
in <A HREF="annexF.htm#clause-F-3">annex F.3</A>.  The toString()
method shall return a one dimensional ECMAScript array with each
member of the list represented using the encoding prescribed for the
corresponding toString() method.  The toP21String() method shall
return a one dimensional ECMAScript array with each member of the list
represented using the encoding prescribed for the corresponding
toP21String() method.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.List (new P21.Integer (1), new
P21.Integer(2), new P21.Integer(3));&quot; is equivalent to the
following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
&lt;example> = (1, 2, 3);
..
ENDSEC;
</PRE>

<H4><A NAME="clause-F-3-12"></A>F.3.12 URI mapping</H4>

<p>A property that is defined by a RESOURCE shall be mapped to a P21.URI object. 

<p>If the value addressed by the anchor is an exchange structure then
the valueOf() method shall return the anchor addressed by the URI
encoded as described in this annex.
<p>If the value addressed by the anchor is not an exchange structure then the valueOf method shall return NULL.

<p>The toString() method shall return the URI represented as an
ECMAScript string with the initial &quot;&lt;&quot; and final
&quot;>&quot; characters omitted.  The toP21String() method shall
return the string with the &quot;&lt;&quot; and final &quot;>&quot;
characters included.

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The ECMAScript expression
&quot;model.example.$value = new P21.URI ('#wheel');&quot; is
equivalent to the following exchange structure code.
<PRE CLASS="example">
ANCHOR;
..
#10 = <#wheel>;
..
ENDSEC;
</PRE>



<H3><A NAME="clause-F-4"></A>F.4 Required methods of the P21 object</H3>
<p>
The P21.Model object shall have the following methods.


<H4><A NAME="clause-F-4-1"></A>F.4.1  uri() method</H4>

<P>The uri() method shall return the address of the exchange structure
as a P21.URI object.

<H4><A NAME="clause-F-4-2"></A>F.4.2  name() method</H4>

<P>The name() method shall return the <b>file_name.name</b> (see
clause <A href="clause8.htm#clause-8-2-3">8.2.3</A>) of the header
section of the exchange structure as a P21.String object.

<H4><A NAME="clause-F-4-3"></A>F.4.3  schema_population() method</H4>
<p>The schema_population() method shall return an array of
P21.Population objects describing the <b>schema_population</b> of the
exchange structure (see
clause <A href="clause8.htm#clause-8-2-5">8.2.5</A>).
<p>Each P21.Population object shall have the following methods:
<ul>
<li>The uri() method shall return the address of the exchange
structure that is to be included in the population as a P21.URI
object.
<li>The stamp() method shall return null or the date and time stamp of
the entry as an ECMAScript date object.
<li>The verification() method shall return true if the referenced
structure has not been altered since the verification string was set,
and false otherwise.
</ul>

<H4><A NAME="clause-F-4-4"></A>F.4.4  set_uri() method</H4>

<P>The set_uri() method shall set the address of the exchange
structure to the P21.URI object given by the argument.

<H4><A NAME="clause-F-4-5"></A>F.4.5  set_name() method</H4>

<P>The set_name() method shall set the <b>file_name.name</b> of the
header section of the exchange structure to the P21.String object
given by the argument.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Applications use
the <b>file_name.name</b> to determine the ECMAScript representation
of the anchors in an exchange structure .

<H4><A NAME="clause-F-4-6"></A>F.4.6  set_schema_population() method</H4>
<p>The set_schema_population() method shall set the <b>schema
population</b> to the array of P21.Population objects given by the
argument.

<p>Each P21.Population object shall have the following methods:
<ul>
<li>The set_uri() method shall set the address of the exchange
structure to the value of the P21.URI object given as the argument.
<li>The set_stamp() method shall set the date and time stamp of the
entry to the value defined by an ECMAScript date object.
<li>The set_verification() method shall generate and set the message
digest of the reference.
</ul>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The following lines of
ECMAScript code create a new P21.Population object and add it to the
current schema population of the exchange structure in model.
<PRE CLASS="example">
pop = new P21.Population;
pop.set_uri (new P21.URI ('http//www.acme.org/beta.stp'));
pop.set_stamp (new date ('4/2/2013'));
pop.set_verification ();
model.set_schema_population (model.schema_population().push (pop));
</PRE>


<p class=pagefoot>&copy; ISO 2016 &mdash; All rights reserved
</body>
</html>
