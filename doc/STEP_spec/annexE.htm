<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>ISO 10303-21</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<p class=pagehead>ISO 10303-21:2016(E)</p>

<H2 CLASS="annex-clause"><A NAME="clause-E"></A>Annex E<BR>(normative)<BR><BR>Multiple EXPRESS schemas in an exchange structure</H2>


<H3><A NAME="clause-E-1"></A>E.1  Reference validity</H3>

<P>An exchange structure with multiple data sections may have entity
instance references among instances defined in data sections based on
different EXPRESS schemas.  These references across schemas raise two
questions, 1) what references are to be considered valid and 2) which
instances shall be considered as being based on a particular schema
when determining the schema conformance of the exchange structure.</P>

<P>This subclause describes two methods of determining what references
between entity instances are to be considered valid for determining
schema conformance of the exchange structure.  Other methods are
possible but are not specified in this part of ISO 10303.</P>
<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This section describes ways in
which the authors of documents that define EXPRESS schemas may also
define reference validity between two or more schemas.</P>
<P CLASS="example">
When determining schema conformance, an implementation must refer to
the document that defines the schema for the EXPRESS definition, short
names, and other requirements or constraints.  If the schema is to be
used in combination with others, the document must also define what
references are to be considered valid.</P>
<P CLASS="example">
It is expected that this determination will be done once and will
govern all uses of the multiple schemas, so no attempt is made to
convey within a particular exchange structure the means by which
reference validity was originally determined.</P>


<H4><A NAME="clause-E-1-1"></A>E.1.1  EXPRESS interface specification method</H4>

<P>If this method is used, references between entity instances defined
by different schemas shall be governed by the EXPRESS interface
specification set forth in clause 11 of ISO 10303-11.  </P>

<P>An instance of a type defined by a schema may be referenced by an
instance of a type defined by a second schema if the first type is
interfaced by the second schema using USE or REFERENCE constructs.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the following two
schemas and the exchange structure based on them:</P>


<PRE CLASS="example">
SCHEMA base;
ENTITY a;
  range : REAL;
END_ENTITY;
ENTITY b;
  name : STRING;
END_ENTITY;
END_SCHEMA;

SCHEMA extension;
USE FROM base (a, b);

ENTITY c;
  addressed_item : b;
  address : STRING;
END_ENTITY;
  
RULE a_range_positive FOR (a);
WHERE
  WR1: SIZEOF (QUERY (inst &lt;* a | inst.range &lt; 0)) = 0;
END_RULE;
END_SCHEMA;

&nbsp;
ISO-10303-21;
HEADER;
.. 
..
FILE_SCHEMA(('BASE', 'EXTENSION'));
ENDSEC;
DATA ('ONE', ('BASE'));
#1=A(-3.5);
#2=B('Sam Smith');
#3=B('John Doe');
ENDSEC;
DATA ('TWO', ('EXTENSION'));
#4=C(#2, '100 Main Street');
#5=C(#3, '1300 Elmwood Avenue);
ENDSEC;
END-ISO-10303-21;
</PRE>

<P CLASS="example">
Using the EXPRESS interface specification method, when determining the
validity of references, an implementation must consider that entity
type B is explicitly interfaced by schema 'EXTENSION' so the
references from #4 to #2 and #5 to #3 are permitted.</P>


<H4><A NAME="clause-E-1-2"></A>E.1.2  SDAI domain equivalence method</H4>

<P>If this method is used, references between entity instances defined
by different schemas shall be governed by the domain equivalence
methods specified in ISO 10303-22.</P>

<P>Given an instance of a type defined by a schema, instances of any
entity type in the schema that may reference instances of the first
type may also reference instances of any type that is declared domain
equivalent to the first type.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the following two
schemas and the exchange structure based on them:</P>


<PRE CLASS="example">
SCHEMA LONGA;
ENTITY a;
  range : REAL;
END_ENTITY;
ENTITY b;
  name : STRING;
END_ENTITY;
END_SCHEMA;

SCHEMA LONGB;
ENTITY a;
  range : REAL;
END_ENTITY;
ENTITY b;
  name : STRING;
END_ENTITY;

ENTITY c;
  addressed_item : b;
  address : STRING;
END_ENTITY;
  
RULE a_range_positive FOR (a);
WHERE
  WR1: SIZEOF (QUERY (inst &lt;* a | inst.range &lt; 0)) = 0;
END_RULE;
END_SCHEMA;

&nbsp;
ISO-10303-21;
HEADER;
..
..
FILE_SCHEMA(('LONGA', 'LONGB'));
ENDSEC;
DATA ('ONE', ('LONGA'));
#1=A(-3.5);
#2=B('Sam Smith');
#3=B('John Doe');
ENDSEC;
DATA ('TWO', ('LONGB'));
#4=C(#2, '100 Main Street');
#5=C(#3, '1300 Elmwood Avenue);
ENDSEC;
END-ISO-10303-21;
</PRE>

<P CLASS="example">
For the purpose of this example, assume that we have domain
equivalence information, determined using one of the techniques
described in ISO 10303-22, that states types A and B are domain
equivalent in both schemas.  That is:</P>

<PRE CLASS="example">
LONGA.A is DEQ to LONGB.A
LONGB.A is DEQ to LONGA.A

LONGA.B is DEQ to LONGB.B
LONGB.B is DEQ to LONGA.B
</PRE>

<P CLASS="example">
Using the domain equivalence, when determining the validity of
references, an implementation must consider that entity type LONGA.B
is domain equivalent to LONGB.B so the references from #4 to #2 and #5
to #3 are permitted.</P>


<H3><A NAME="clause-E-2"></A>E.2  Determining population of a schema</H3>

<P>The <B>file_population</B> header section entity associates an
EXPRESS schema and a collection of entity instances within the
exchange structure.  The attribute <B>determination_method</B>
identifies an algorithm for selecting a collection of entity instances
when given a set of data sections.  This subclause describes three
determination methods. Other methods are possible but are not
specified in this part of ISO 10303.</P>

<P>When determining schema conformance of the exchange structure, the
collection of entity instances identified by
each <B>file_population</B> shall be checked against the associated
EXPRESS schema.  If a data section is not referenced by
any <B>file_population</B>, that data section shall be checked against
its governing schema according to the section boundary method
described below.</P>

<P>When determining the satisfaction of requirements and constraints
of a schema, references to entity instances outside of the collection
of entity instances shall behave as unset values.</P>
<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The following procedure describes
an approach for checking the exchange structure that is consistent
with contents of clause <A href="clause8.htm#clause-8-2-6">8.2.6</A> and the
paragraph above:</P>


<P CLASS="example">
For each file_population &quot;F&quot; in the exchange structure:</P>
<P CLASS="example">
&mdash; find a set of instances by applying the determination method
identified by F.determination_method to the data sections called out
by F.governed_sections.  If F.governed_sections is unset, apply to all
data sections in the exchange structure;</P>
<P CLASS="example">
&mdash; check this set of instances against the rules and constraints
defined by F.governing_schema;</P>
<P CLASS="example">
&mdash; mark the data sections that were given as input to
F.determination_method.</P>
<P CLASS="example">
&nbsp;</P>
<P CLASS="example">
For each data section &quot;D&quot; that has not been marked:</P>
<P CLASS="example">
&mdash; check the set of instances in D against the rules and
constraints defined by its schema.</P>


<H4><A NAME="clause-E-2-1"></A>E.2.1  Section boundary method</H4>

<P>The <B>determination_method</B> attribute shall have the value
&quot;SECTION_BOUNDARY&quot; when the section boundary method is to be
used.  Given an input of one or more data sections, the collection of
entity instances shall consist of the following:</P>

<UL>
<LI>all instances in the given data sections.</LI>
</UL>

<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the schemas and
exchange structure described by the example in
<A HREF="annexE.htm#clause-E-1-1">E.1.1</A> The header section does not contain
any file_population instances.  When determining the schema
conformance of the exchange structure, the following must be
considered: </P>

<P CLASS="example">
&mdash; data section ONE is not referenced by any file_population, so
we must check all instances in the data section against its governing
schema.  All instances in data section ONE must satisfy the
requirements and constraints of schema BASE.  In this example, the
population satisfies all constraints of schema BASE.</P>

<P CLASS="example">
&mdash; data section TWO is not referenced by any file_population, so
we must check all instances in the data section against its governing
schema.  All instances in data section TWO must satisfy the
requirements and constraints of schema EXTENSION.  In this example,
the data section does not contain any instances of entity A, so rule
a_range_positive is satisfied.  The addressed_item attribute of
instances #4 and #5 refer to instances outside of the population, so
the references must be treated as if they were unset values.  The
addressed_item attribute is not optional, so this population does not
satisfy the constraints of schema EXTENSION.</P>

<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the schemas and
exchange structure described by the example in
<A HREF="annexE.htm#clause-E-1-1">E.1.1</A>, but with a header section as
shown below:</P>


<PRE CLASS="example">
HEADER;
..
..
FILE_SCHEMA(('BASE', 'EXTENSION'));
file_population('BASE', 'SECTION_BOUNDARY', ('ONE'));
file_population('EXTENSION', 'SECTION_BOUNDARY', ('ONE','TWO'));
ENDSEC;
</PRE>

<P CLASS="example">
When determining the schema conformance of the exchange structure, the
following must be considered: </P>
<P CLASS="example">
&mdash; the first file_population defines a collection of instances
that is governed by schema BASE.  All instances in data section ONE
must satisfy the requirements and constraints of schema BASE.  In this
example, the population satisfies all constraints of schema BASE.</P>
<P CLASS="example">
&mdash; the second file_population defines a collection of instances
that is governed by schema EXTENSION.  All instances in data section
ONE and data section TWO must satisfy the requirements and constraints
of schema EXTENSION.  In this example, rule a_range_positive is
violated by instance #1, so this population does not satisfy the
constraints of schema EXTENSION.</P>


<H4><A NAME="clause-E-2-2"></A>E.2.2  Include all compatible method</H4>

<P>The <B>determination_method </B> attribute shall have the value
&quot;INCLUDE_ALL_COMPATIBLE&quot; when the include all compatible
method is to be used.  Given an input of one or more data sections,
the collection of entity instances shall consist of the following:</P>
<UL>
<LI>all instances in the given data sections;</LI>
<LI>all instances in other data sections, where the entity type of the
instance is permitted to be referenced by instances defined by the
governing schema of the population.</LI>
</UL>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the schemas and
exchange structure described by the example in
clause <A HREF="annexE.htm#clause-E-1-1">E.1.1</A>, but with a header
section as shown below:</P>


<PRE CLASS="example">
HEADER;
..
..
FILE_SCHEMA(('BASE', 'EXTENSION'));
file_population('BASE', 'INCLUDE_ALL_COMPATIBLE', ('ONE'));
FILE_POPULATION('EXTENSION', 'INCLUDE_ALL_COMPATIBLE', ('TWO'));
ENDSEC;
</PRE>

<P CLASS="example">
When determining the schema conformance of the exchange structure, the
following must be considered: </P>

<P CLASS="example">
&mdash; the first file_population defines a collection of instances
that is governed by schema BASE.  This collection contains all
instances in data section ONE.  It must also contain instances in data
section TWO that are permitted to be referenced by instances defined
by schema BASE.  In this example, there are none.  However, if data
section TWO contained instances of type A or B, they would be
considered for constraint validation.  In this example, the population
satisfies all constraints of schema BASE.</P>

<P CLASS="example">
&mdash; the second file_population defines a collection of instances
that is governed by schema EXTENSION.  This collection contains all
instances in data section TWO. It also contains all instances of A and
B from data section ONE because those types are permitted to be
referenced by instances defined by schema EXTENSION.  In this example,
rule a_range_positive is violated by instance #1, so this population
does not satisfy the constraints of schema EXTENSION.</P>


<H4><A NAME="clause-E-2-3"></A>E.2.3  Include referenced instance method</H4>

<P>The <B>determination_method</B> attribute shall have the value
&quot;INCLUDE_REFERENCED&quot; when the include referenced instance
method is to be used.  Given an input of one or more data sections,
the collection of entity instances shall consist of the following:</P>

<UL>
<LI>all instances in the given data sections;</LI>
<LI>instances in other data sections, where the instance is referenced
by an instance in the given data sections.</LI>
</UL>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consider the schemas and
exchange structure described by the example in
clause <A HREF="annexE.htm#clause-E-1-1">E.1.1</A>, but with a header
section as shown below:</P>


<PRE CLASS="example">
HEADER;
..
..
FILE_SCHEMA(('BASE', 'EXTENSION'));
FILE_POPULATION('BASE', 'INCLUDE_REFERENCED', ('ONE'));
FILE_POPULATION('EXTENSION', 'INCLUDE_REFERENCED', ('TWO'));
ENDSEC;
</PRE>

<P CLASS="example">
When determining the schema conformance of the exchange structure, the
following must be considered: </P>

<P CLASS="example">
&mdash; the first file_population defines a collection of instances
that is governed by schema BASE.  This collection contains all
instances in data section ONE.  It must also contain instances in data
section TWO that are referenced by instances in data section ONE.  In
this example, there are none.  In this example, the population
satisfies all constraints of schema BASE.</P>

<P CLASS="example">
&mdash; the second file_population defines a collection of instances
that is governed by schema EXTENSION.  This collection contains all
instances in data section TWO. It also contains instances #2 and #3
from data section ONE because those types are referenced by instances
in data section TWO.  In this example, instance #1 is not a member of
the population, so rule a_range_positive is satisfied.  This
population satisfies all constraints of schema EXTENSION.</P>


<p class=pagefoot>&copy; ISO 2016 &mdash; All rights reserved
</body>
</html>
