<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>ISO 10303-21</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<p class=pagehead>ISO 10303-21:2016(E)</p>


<H2 CLASS="clause"><A NAME="clause-12"></A>12 Mapping from EXPRESS to the exchange structure</H2>

<H3><A NAME="clause-12-1"></A>12.1 Mapping of EXPRESS data types</H3>

<P>This clause describes how instances of data types defined in the
EXPRESS language defined in annex G of ISO 10303-11 are mapped to the
exchange structure.</P>

<P>The EXPRESS language includes TYPE and ENTITY declarations,
CONSTANT declarations, constraint specifications and algorithm
descriptions.  Only instances of data types, as defined by EXPRESS
data types and TYPE and ENTITY declarations, are mapped to the
exchange structure.  Other elements of the language are not mapped to
the exchange structure.</P>

<TABLE ALIGN="center" BORDER="1">
<CAPTION>
<A NAME="table-5"></A>Table 5 &mdash; Quick reference mapping table
</CAPTION>
<thead>
<tr><th>EXPRESS element</th>		<th>mapped onto:</th> </tr>
</thead>
<tbody>
<TR><TD>ARRAY		      </TD>	<TD>list		      </TD></TR>
<TR><TD>BAG		      </TD>	<TD>list		      </TD></TR>
<TR><TD>BOOLEAN		      </TD>	<TD>boolean		      </TD></TR>
<TR><TD>BINARY		      </TD>	<TD>binary		      </TD></TR>
<TR><TD>CONSTANT	      </TD>	<TD>entity or value instance      </TD></TR>
<TR><TD>DERIVED ATTRIBUTE     </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>ENTITY		      </TD>	<TD>entity instance	      </TD></TR>
<TR><TD>ENTITY AS ATTRIBUTE   </TD>	<TD>instance name  </TD></TR>
<TR><TD>ENUMERATION	      </TD>	<TD>enumeration	      </TD></TR>
<TR><TD>FUNCTION	      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>INTEGER		      </TD>	<TD>integer		      </TD></TR>
<TR><TD>INVERSE		      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>LIST		      </TD>	<TD>list		      </TD></TR>
<TR><TD>LOGICAL		      </TD>	<TD>enumeration	      </TD></TR>
<TR><TD>NUMBER		      </TD>	<TD>real		      </TD></TR>
<TR><TD>PROCEDURE	      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>REAL		      </TD>	<TD>real		      </TD></TR>
<TR><TD>REMARKS		      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>RULE		      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>SCHEMA		      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>SELECT		      </TD>	<TD>See <A href="#clause-12-1-8">12.1.8</A></TD></TR>
<TR><TD>SET		      </TD>	<TD>list		      </TD></TR>
<TR><TD>STRING		      </TD>	<TD>string		      </TD></TR>
<TR><TD>TYPE		      </TD>	<TD>See <A href="#clause-12-1-6">12.1.6</A></TD></TR>
<TR><TD>UNIQUE rule	      </TD>	<TD>NO INSTANTIATION      </TD></TR>
<TR><TD>WHERE RULES           </TD>	<TD>NO INSTANTIATION      </TD></TR>
</tbody>
</TABLE>



<H4><A NAME="clause-12-1-1"></A>12.1.1 Mapping of EXPRESS simple data types</H4>


<H5><A NAME="clause-12-1-1-1"></A>12.1.1.1 Integer</H5>

<P>Values of the EXPRESS data type INTEGER shall be mapped to the
exchange structure as an integer data type (see <A href="clause6.htm#clause-6-4-1">6.4.1</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or as a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this edition of this part of ISO
10303 instance values can be defined in the reference section
(see <A href="clause10.htm">10</A>), and as EXPRESS constants.</P>


<H5><A NAME="clause-12-1-1-2"></A>12.1.1.2 String</H5>

<P>Values of the EXPRESS data type STRING shall be mapped to the
exchange structure as a string data type (see <A href="clause6.htm#clause-6-4-3">6.4.3</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or as a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).


<H5><A NAME="clause-12-1-1-3"></A>12.1.1.3 Boolean</H5>

<P>Values of the EXPRESS data type BOOLEAN shall be mapped to the
exchange structure as an enumeration data type (see <A href="clause6.htm#clause-6-4-5">6.4.5</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).

<P>The EXPRESS data type BOOLEAN shall be treated
as a predefined enumerated data type with a value encoded by the
graphic characters &quot;T&quot; or &quot;F&quot;. These values shall
correspond to true and false respectively.  </P>


<H5><A NAME="clause-12-1-1-4"></A>12.1.1.4 Logical</H5>

<P>Values of the EXPRESS data type LOGICAL shall be mapped to the
exchange structure as an enumeration data type (see <A href="clause6.htm#clause-6-4-5">6.4.5</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).

<P>The EXPRESS data type LOGICAL shall be treated as a predefined
enumerated data type with a value encoded by the graphic characters
&quot;T&quot;, &quot;F&quot; or &quot;U&quot;. These values shall
correspond to true, false, and unknown respectively.</P>


<H5><A NAME="clause-12-1-1-5"></A>12.1.1.5 Real</H5>

<P>Values of the EXPRESS data type REAL shall be mapped to the
exchange structure as a real data type (see <A href="clause6.htm#clause-6-4-2">6.4.2</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or as a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget;
  i1: INTEGER;    -----------&gt;  A
  i2: INTEGER;    -----------&gt;  B
  s1: STRING(3);  -----------&gt;  C
  s2: STRING;     -----------&gt;  D
  l : LOGICAL;    -----------&gt;  E
  b : BOOLEAN;    -----------&gt;  F
  r1: REAL(4);    -----------&gt;  G
  r2: REAL;       -----------&gt;  H
  r3: REAL;       -----------&gt;  L
  r4: REAL;       -----------&gt;  M
END_ENTITY;
</PRE>

<P CLASS="example">
Sample instance in the data section:</P>

<PRE CLASS="example">
#2 = WIDGET(99, 99999, 'ABC', 'ABCDEFG', .T., .F., 9., 1.2345, @10, @PI);
             ^    ^      ^       ^        ^    ^   ^      ^     ^    ^
             |    |      |       |        |    |   |      |     |    |
             |    |      |       |        |    |   |      |     |    |
             A    B      C       D        E    F   G      H     L    M
</PRE>

<P CLASS="example">
A: i1 has a value of 99 in this entity instance.</P>
<P CLASS="example">
B: i2 has a value of 99999 in this entity instance.</P>
<P CLASS="example">
C: s1 has a value of 'ABC' in this entity instance. This value falls
within the range (3 characters) specified for this attribute.</P>
<P CLASS="example">
D: s2 has a value of 'ABCDEFG' in this entity instance.</P>
<P CLASS="example">
E: l has a value of TRUE in this entity instance.</P>
<P CLASS="example">
F: b has a value of FALSE in this entity instance.</P>
<P CLASS="example">
G: r1 has the value of 9. in this entity instance. The precision
specification does not affect the encoding.</P>
<P CLASS="example">
H: r2 has a value of 1.2345 in this entity instance.</P>
<P CLASS="example">
L: r3 has a value defined in the reference section.</P>
<P CLASS="example">
M: r4 has a value defined in the EXPRESS schema.</P>


<H5><A NAME="clause-12-1-1-6"></A>12.1.1.6 Binary</H5>

<P>Values of the EXPRESS data type BINARY shall be mapped to the
exchange structure as a binary data type (see <A href="clause6.htm#clause-6-4-6">6.4.6</A>), 
as a constant value name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>),
or as a value instance name (see <A href="clause6.htm#clause-6-4-4-4">6.4.4.4</A>).

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY picture;
  bn :  BINARY;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#4 = PICTURE(&quot;1556FB0&quot;);
                 ^
                 |
                 A
</PRE>

<P CLASS="example">
A: bn has an encoding of &quot;1556FB0&quot; in this instance,
corresponding with the bit sequence 101 0101 0110 1111 1011 0000.</P>


<H5><A NAME="clause-12-1-1-7"></A>12.1.1.7 Number</H5>

<P>Values of the EXPRESS data type NUMBER shall be mapped to the
exchange structure as a real data type. 
<A href="clause6.htm#clause-6-4-2">6.4.2</A> describes the composition of
a real data type.</P>


<H4><A NAME="clause-12-1-2"></A>12.1.2 List</H4>

<P>Values of the EXPRESS data type LIST shall be mapped to the
exchange structure as a list data type. <A href="clause7.htm">Clause
7</A> describes the composition of a list data type. If the LIST is
empty, the list shall be encoded as a <EM>left parenthesis</EM>
(&quot;(&quot;) followed by a <EM>right parenthesis</EM>
(&quot;)&quot;).  Within the list, each instance of the element type
shall be encoded as specified in <A href="clause12.htm">clause 12</A>
for that EXPRESS data type.</P>
<p>
Values of the EXPRESS data type LIST may be defined in the reference
section.  The value shall be mapped using the value instance name
defined for that instance in the reference section. The value of the
instance shall be compatible with the EXPRESS type.

<p>
Values of the EXPRESS data type LIST may be defined by EXPRESS
constants.  The value shall be mapped using the value defined for that
instance in the EXPRESS schema. The value of the instance shall be
compatible with the EXPRESS type.


<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If, in a particular entity
instance, no value is provided for an OPTIONAL attribute whose data
type is a LIST, the attribute is encoded by a <EM>dollar sign</EM>
(&quot;$&quot;), as specified in <A href="#clause-12-2-2">12.2.2</A>,
and not as an empty list.</P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget;
  attribute1:  LIST [0 : ?] OF INTEGER; -----------&gt; A
  attribute2:  LIST [1 : ?] OF INTEGER; -----------&gt; B
  attribute3:  OPTIONAL LIST [1 : ?] OF INTEGER; --&gt; C
  attribute4:  REAL; ------------------------------&gt; D
  attribute5:  LIST [1 : ?] OF INTEGER; --&gt; E
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#4 = WIDGET((), (1,2,@10), $, 2.56, @PI);
             ^     ^       ^   ^     ^
             |     |       |   |     |
             A     B       C   D     E
</PRE>

<P CLASS="example">
A: attribute1 is an empty list (list with zero elements).</P>
<P CLASS="example">
B: attribute2 contains three elements in this instance. One of the instances is defined by instance @10 in the reference section. </P>
<P CLASS="example">
C: attribute3 does not have a value in this instance.</P>
<P CLASS="example">
D: attribute4 has a value of 2.56 in this instance.</P>
<P CLASS="example">
E: attribute5 has a LIST value defined by the EXPRESS constant PI.</P>


<H4><A NAME="clause-12-1-3"></A>12.1.3 Array</H4>

<P>Values of the EXPRESS data type ARRAY shall be mapped to the
exchange structure as a list data type.
<A href="clause7.htm">Clause 7</A> describes the composition of a list
data type. If an EXPRESS attribute is a multidimensional array the
attribute shall be encoded as a list of lists, nested as deeply as
there are dimensions. In constructing such lists, the inner-most list,
the list containing only instances of the element type, shall
correspond to the right-most ARRAY specifier in the EXPRESS statement
defining the entity. The ordering of the elements within the encoding
shall be that all the elements of the inner-most list are encoded for
each element of the next outer list. This order means that the
right-most index in each list shall vary first. Within the list, each
instance of the element type shall be encoded as specified in
<A href="clause12.htm">clause 12</A> for that EXPRESS data type.  If the
array data type has OPTIONAL elements, any element for which no value
is provided shall be encoded by a <EM>dollar sign</EM>
(&quot;$&quot;).</P>

<p>Values of the EXPRESS data type ARRAY may be defined in the
reference section.  The value shall be mapped using the value instance
name defined for that instance in the reference section. The value of
the instance shall be compatible with the EXPRESS type.

<p>Values of the EXPRESS data type ARRAY may be defined by EXPRESS
constants.  The value shall be mapped using the value defined for that
instance in the EXPRESS schema. The value of the instance shall be
compatible with the EXPRESS type.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If, in a particular entity
instance, no value is provided for an OPTIONAL attribute whose data
type is an ARRAY, the attribute is encoded by a <EM>dollar sign</EM>
(&quot;$&quot;), as specified in <A href="#clause-12-2-2">12.2.2</A>,
and not as an empty list.</P>

<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
X : ARRAY[1:5] OF ARRAY[100:102] OF INTEGER
</PRE>

<P CLASS="example">
This is encoded in the following order:</P>
<PRE CLASS="example">
( (X [1,100], X [1,101], X [1,102] ),
  (X [2,100], X [2,101], X [2,102] ),
  (X [3,100], X [3,101], X [3,102] ),
  (X [4,100], X [4,101], X [4,102] ),
  (X [5,100], X [5,101], X [5,102] )  )
</PRE>

<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget;
  attribute1:  ARRAY [-1 : 3] OF INTEGER;     ----------------------&gt; A
  attribute2:  ARRAY [1 : 5] OF OPTIONAL INTEGER;     --------------&gt; B
  attribute3:  ARRAY [1 : 2] OF ARRAY [1 : 3] OF INTEGER;     ------&gt; C
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">

#30 = WIDGET(<U>(1,2,3,4,5)</U> , <U>(1,2,3,$,5)</U> , <U>((1,2,3),(4,5,6))</U>);
                  ^            ^                 ^
                  |            |                 |
                  A            B                 C
</PRE>

<P CLASS="example">
A: attribute1 contains the following values:
</P>
<PRE CLASS="example">
attribute1 [-1] = 1
attribute1 [0]  = 2
attribute1 [1]  = 3
attribute1 [2]  = 4
attribute1 [3]  = 5
</PRE>

<P CLASS="example">
B: attribute2 contains the following values:</P>
<PRE CLASS="example">
attribute2 [1] = 1
attribute2 [2] = 2
attribute2 [3] = 3
attribute2 [4] = not provided
attribute2 [5] = 5
</PRE>

<P CLASS="example">
The significance of a missing value is defined within the EXPRESS
schema.</P>
<P CLASS="example">
C: attribute3 contains the following values:</P>

<PRE CLASS="example">
attribute3 [1,1] = 1
attribute3 [1,2] = 2
attribute3 [1,3] = 3
attribute3 [2,1] = 4
attribute3 [2,2] = 5
attribute3 [2,3] = 6
</PRE>

<H4><A NAME="clause-12-1-4"></A>12.1.4 Set</H4>

<P>Values of the EXPRESS data type SET shall be mapped to the exchange
structure as a list data type. <A href="clause7.htm">Clause 7</A>
describes the composition of a list data type. Within the list, each
instance of the element type shall be encoded as specified
in <A href="clause12.htm">clause 12</A> for that EXPRESS data type. If
the SET is empty, the list shall be encoded as a <EM>left
parenthesis</EM> (&quot;(&quot;) followed by a <EM>right
parenthesis</EM> (&quot;)&quot;).</P>

<P>Values of the EXPRESS data type SET may be defined in the reference
section.  The value shall be mapped using the value instance name
defined for that instance in the reference section. The value of the
instance shall be compatible with the EXPRESS type.

<p>Values of the EXPRESS data type SET may be defined by EXPRESS
constants.  The value shall be mapped using the value defined for that
instance in the EXPRESS schema. The value of the instance shall be
compatible with the EXPRESS type.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If, in a particular entity
instance, no value is provided for an OPTIONAL attribute whose data
type is a SET, the attribute is encoded by a <EM>dollar sign</EM>
(&quot;$&quot;), as specified in <A href="#clause-12-2-2">12.2.2</A>,
and not as an empty list.</P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget;
  a_number: SET OF INTEGER;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#2 = WIDGET(<U>(0,1,2)</U>); --------&gt; A
#3 = WIDGET(<U>(0,$,2)</U>); --------&gt; B
#4 = WIDGET(<U>(0,0,2)</U>); --------&gt; C
</PRE>

<P CLASS="example">
A: The attribute a_number was defined by the set numbers 0, 1, 2 in
this instance.</P>
<P CLASS="example">
B: Syntactically the instance is correct. However, the instance is
incorrect with respect to the definition of a SET in EXPRESS because a
SET is not allowed to have missing members.</P>
<P CLASS="example">
C: Syntactically the instance is correct. However, the instance is
incorrect with respect to the definition of a SET in EXPRESS because a
SET is not allowed to have duplicate members.</P>


<H4><A NAME="clause-12-1-5"></A>12.1.5 Bag</H4>

<P>Values of the EXPRESS data type BAG shall be mapped to the exchange
structure as a list data type. <A href="clause7.htm">Clause 7</A>
describes the composition of a list data type. Within the list, each
instance of the element type shall be encoded as specified
in <A href="clause12.htm">clause 12</A> for that EXPRESS data type. If
the BAG is empty, the list shall be encoded as a <EM>left
parenthesis</EM> (&quot;(&quot;) followed by a <EM>right
parenthesis</EM> (&quot;)&quot;).</P>

<p>Values of the EXPRESS data type BAG may be defined in the reference
section.  The value shall be mapped using the value instance name
defined for that instance in the reference section. The value of the
instance shall be compatible with the EXPRESS type.

<p>Values of the EXPRESS data type BAG may be defined by EXPRESS
constants.  The value shall be mapped using the value defined for that
instance in the EXPRESS schema. The value of the instance shall be
compatible with the EXPRESS type.

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If, in a particular entity
instance, no value is provided for an OPTIONAL attribute whose data
type is a BAG, the attribute is encoded by a <EM>dollar sign</EM>
(&quot;$&quot;), as specified in <A href="#clause-12-2-2">12.2.2</A>,
and not as an empty list.</P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget;
  a_numbers: BAG OF INTEGER;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#2 = WIDGET((0,1,1,2));  --------&gt; A
#3 = WIDGET((0,$,2));    --------&gt; B
</PRE>

<P CLASS="example">
A: The attribute a_numbers was defined by the collection of numbers 0,
1, 1, 2 in this instance.</P>
<P CLASS="example">
B: Syntactically, the instance is correct. However, the instance is
incorrect with respect to the definition of BAG in EXPRESS because a
BAG is not allowed to have missing members.</P>


<H4><A NAME="clause-12-1-6"></A>12.1.6 Simple defined types</H4>

<P>A simple defined type is a type defined by an EXPRESS type
declaration in which the underlying type is neither an ENUMERATION nor
a SELECT.  A simple defined type shall be mapped to the exchange
structure as the data type used in its definition.</P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>

<PRE CLASS="example">
TYPE
  type1 =  INTEGER;
END_TYPE;

TYPE
  type2 = LIST [1 : 2] of REAL;
END_TYPE;

ENTITY widget;
  attribute1:  LOGICAL;  ------------&gt;  A
  attribute2:  TYPE1;    ------------&gt;  B
  attribute3:  TYPE2;    ------------&gt;  C
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#4 = WIDGET( <U>.T.</U>, <U>256</U>, <U>(1.0,0.0)</U>);
              ^    ^       ^
              |    |       |
              A    B       C
</PRE>

<P CLASS="example">
A: The value of the attribute attribute1; in this instance, TRUE.</P>
<P CLASS="example">
B: Type1 is an integer type and, therefore, the value 256 is
valid.</P>
<P CLASS="example">
C: Type2 is a list and, therefore, a list with 2 REAL elements is valid.</P>


<H4><A NAME="clause-12-1-7"></A>12.1.7 Enumeration</H4>

<P>Values of an EXPRESS ENUMERATION data type shall be mapped to the
exchange structure as an enumeration data
type. <A href="clause6.htm#clause-6-4-5">6.4.5</A> describes the
composition of a enumeration data type. </P>

<P>If the document that defines the schema whose instances are the
subject of the data section also defines a set of short names for the
enumerated values within that schema, the actual value in an instance
of the ENUMERATION may be the short name corresponding to one of the
enumerated values in the EXPRESS schema. Otherwise, the actual value
shall be one of the enumerated values in the EXPRESS schema.  In
either case, any <EM>small letters</EM> shall be converted to the
corresponding <EM>capital letters</EM>, and the value shall be
delimited by <EM>full stops</EM> &quot;.&quot; as defined in the
ENUMERATION production of <A HREF="clause5.htm#table-2">Table 2</A>.</P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>

<PRE CLASS="example">
TYPE
  primary_colour = ENUMERATION OF (red, green, blue);
END_TYPE;

ENTITY widget;
  p_colour: primary_colour;     ---------------&gt; A
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity Instance in data section:</P>

<PRE CLASS="example">
#2 = WIDGET(<U>.RED.</U>);
              ^
              |
              A
</PRE>

<P CLASS="example">
A: The value of the attribute p_colour in this entity instance is
RED.</P>


<H4><A NAME="clause-12-1-8"></A>12.1.8 Select data types</H4>


<P>An EXPRESS select data type defines a list of data types, called
the &quot;select-list&quot;, whose values are valid instances of the
select data type.  An instance of a select data type shall be a value
of at least one of the data types in the select-list.  The value shall
be encoded in the exchange structure as determined by the following
procedure:</P>

<UL>
<LI>if the value is an instance of an entity data type in the
select-list, it shall be mapped to the exchange structure as an
instance name (see <A href="clause6.htm#clause-6-4-4">6.4.4</A>);</LI>

<LI>if the value is an instance of a simple defined type in the
select-list, it shall be mapped to the exchange structure as a
TYPED_PARAMETER (see <A HREF="clause5.htm#table-3">Table 3</A>) in
which the KEYWORD shall identify the simple defined type, as specified
below, and the PARAMETER shall be the encoding of the value of the
simple defined type, as specified
in <A href="#clause-12-1-6">12.1.6</A>;</LI>

<LI>if the value is an instance of an enumeration data type in the
select-list, it shall be mapped to the exchange structure as a
TYPED_PARAMETER (see <A HREF="clause5.htm#table-3">Table 3</A>) in
which the KEYWORD shall identify the enumeration data type, as
specified below, and the PARAMETER shall be the encoding of the value
of the enumeration data type, as specified
in <A href="#clause-12-1-7">12.1.7</A>;</LI>

<LI>if the value is an instance of a (nested) select data type in the
select-list, it shall be mapped to the exchange structure as an
instance of that select type as provided in this clause.</LI>
</UL>



<P>For instances of simple defined types and enumeration data types,
the KEYWORD shall identify the data type of the instance. The data
type identified shall be one of the types in the select-list.  If the
document that defines the schema whose instances are the subject of
the data section also defines a set of short names for the simple
defined types and enumeration types within that schema, the KEYWORD
may be the short name corresponding to the data type of the
instance. Otherwise, the KEYWORD shall be the name of the simple
defined type or enumeration data type itself.  In either case, any
small letters shall be converted to the corresponding capital letters,
i.e., the encoding shall not contain any small letters.</P>

<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the data type (in the
select-list) which the value instantiates is itself a select data
type, then this clause will be used recursively to encode the
value. Only instances of entity data types, simple defined types and
enumeration data types can actually be encoded (see Example 2).</P>
<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; According to ISO 10303-11, an
instance of a subtype of an entity data type is an instance of the
entity data type.  So &quot;an instance of an entity data type in the
select list&quot; includes instances of subtypes of those entity data
types.</P>
<P CLASS="example">
NOTE 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the entity data types in the
select-list are not mutually exclusive, then a value of the select
data type may instantiate more than one entity data type in the
select-list (see Example 1).</P>
<P CLASS="example">
NOTE 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the value is not an entity
instance, it is an instance of exactly one simple defined-type or
enumeration data type. The value may, however, be a valid instance of
several (nested) select data types and thereby instantiate more than
one type in the original select-list (see Example 2).</P>

<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY Leader SUBTYPE OF (Employee);
  project: STRING;
END_ENTITY;

ENTITY Manager SUBTYPE OF (Employee);
  unit: STRING;
END_ENTITY;

ENTITY Employee;
  name: STRING;
END_ENTITY;

TYPE Supervisor = SELECT (Manager, Leader);
END_TYPE;

&nbsp;

ENTITY Meeting;
  date:         STRING;
  attendees:    SET [2:?] OF Supervisor;
END_ENTITY;
</PRE>
<P CLASS="example">
Sample data section instances:</P>
<PRE CLASS="example">
#1 = LEADER('J. Brahms','Academic Festival');
#2 = MANAGER('S. Ozawa', 'Tokyo Symphony');
#3 = (EMPLOYEE('G. Verdi') LEADER('Aida') MANAGER('La Scala'));
#4 = MEETING('14921012', (#1, #2, #3));
</PRE>

<P CLASS="example">
The second attribute of instance #4 is the attendees: a SET OF
Supervisor. Instance #1 is a Leader and thus a valid Supervisor.
Instance #2 is a Manager and thus a valid Supervisor.  Instance #3 is
an instance of both (entity) types Leader and Manager from the
select-list of Supervisor.  All are mapped according
to <A href="clause6.htm#clause-6-4-4">6.4.4</A>.</P>

<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in EXPRESS:</P>


<PRE CLASS="example">
TYPE Mass = SELECT (Mass_Spec, Mass_Substitute); END_TYPE;

TYPE Mass_Spec = SELECT (Measured_Mass, Computed_Mass, Estimated_Mass);
END_TYPE;

TYPE Measured_Mass = REAL;
END_TYPE;

TYPE Computed_Mass = Extended_Real;
END_TYPE;

TYPE Estimated_Mass = REAL;
END_TYPE;

TYPE Mass_Substitute = SELECT(Weight, Estimated_Mass);
END_TYPE;

TYPE Weight = REAL;
END_TYPE;

TYPE Extended_Real = SELECT (FloatingNumber, NotaNumber);
END_TYPE;

TYPE FloatingNumber = REAL(7);
END_TYPE;

TYPE NotaNumber = ENUMERATION OF (plus_infinity,
  minus_infinity, indeterminate, invalid);
END_TYPE;

ENTITY Steel_Bar;
  bar_length: Extended_Real;
  bar_mass:   Mass;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample instantiation in data section:</P>

<PRE CLASS="example">
#1 = STEEL_BAR(FLOATINGNUMBER(77.0), MEASURED_MASS(13.25));
#2 = STEEL_BAR(NOTANUMBER(.INDETERMINATE.),
     ESTIMATED_MASS(10.0));
#3 = STEEL_BAR(FLOATINGNUMBER(77.0),
     COMPUTED_MASS(FLOATINGNUMBER(14.77719)));
</PRE>

<P CLASS="example">
The first attribute of instance #1 represents an Extended_Real value
that is a FloatingNumber.  It is mapped
(following <A href="#clause-12-1-8">12.1.8</A> for the select data
type Extended_Real) as a TYPED_PARAMETER with KEYWORD FLOATINGNUMBER
(the simple defined type in the select-list).  The PARAMETER value
77.0 is mapped to the exchange structure,
following <A href="#clause-12-1-6">12.1.6</A> for FloatingNumber, as a
value of the simple type REAL.</P>
<P CLASS="example">
The second attribute of instance #1 represents a Measured_Mass value,
which is a valid Mass_Spec value and therefore a valid Mass value.  It
is mapped (by recursive application
of <A href="#clause-12-1-8">12.1.8</A>, since Mass is a select data
type and Mass_Spec is a select data type) as a TYPED_PARAMETER with
KEYWORD MEASURED_MASS (the simple defined type in the select-list).
The PARAMETER value 13.25 is mapped to the exchange structure,
following <A href="#clause-12-1-6">12.1.6</A> for Measured_Mass, as a
value of the simple type REAL.</P>
<P CLASS="example">
The first attribute of instance #2 represents an Extended_Real value
that is a NotaNumber value.  It is mapped
(following <A href="#clause-12-1-8">12.1.8</A> for Extended_Real) as a
TYPED_PARAMETER with KEYWORD NOTANUMBER (the enumeration type in the
select-list).  The PARAMETER value &quot;indeterminate&quot; is mapped
to the exchange structure,
following <A href="#clause-12-1-7">12.1.7</A> for the enumeration type
NotaNumber.</P>
<P CLASS="example">
The second attribute of instance #2 represents an Estimated_Mass
value.  This is a valid Mass_Spec value and also a valid
Mass_Substitute value and therefore a valid value of Mass.  This value
actually instantiates both (select) data types in the select-list of
Mass.  It is mapped (by recursive application
of <A href="#clause-12-1-8">12.1.8</A>, since Mass is a select data
type and Mass_Spec is a select data type) as a TYPED_PARAMETER with
KEYWORD ESTIMATED_MASS (the simple defined type in the
select-list). The PARAMETER value 10.0 is mapped to the exchange
structure, following clause <A href="#clause-12-1-6">12.1.6</A> for
Estimated_Mass, as a value of the simple type REAL.</P>
<P CLASS="example">
The first attribute of instance #3 is the same as the first attribute
of instance #1.</P>
<P CLASS="example">
The second attribute of instance #3 represents a Computed_Mass value,
which is a valid Mass_Spec value and therefore a valid Mass value.  It
is mapped (by recursive application
of <A href="#clause-12-1-8">12.1.8</A>, since Mass is a select data
type and Mass_Spec is a select data type) as a TYPED_PARAMETER with
KEYWORD COMPUTED_MASS (the simple defined type in the select-list).
The PARAMETER value encoding follows
clause <A href="#clause-12-1-6">12.1.6</A> for a value of
Computed_Mass, which is an Extended_Real value.  Extended_Real is a
select data type.  Per clause <A href="#clause-12-1-8">12.1.8</A>, the
Extended_Real value is encoded as a TYPED_PARAMETER with KEYWORD
FLOATINGNUMBER and PARAMETER value 14.77719, following
clause <A href="#clause-12-1-6">12.1.6</A> for FloatingNumber.</P>


<H3><A NAME="clause-12-2"></A>12.2 Mapping of EXPRESS entity data types</H3>

<P>An instance of an EXPRESS entity data type shall be mapped to the
exchange structure as an ENTITY_INSTANCE.</P>
<P>
As defined by ISO 10303-11, a &quot;simple entity instance&quot; is an
entity instance that is not an instance of a subtype of any entity
data type.  All other entity instances are called &quot;complex entity
instances&quot;.  A simple entity instance shall be mapped as
specified in <A href="#clause-12-2-1">12.2.1</A>.  A complex entity
instance shall be mapped as specified
in <A href="#clause-12-2-5">12.2.5</A>.</P>
<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A simple entity instance is an
entity instance which is completely described by a <EM>single</EM>
EXPRESS entity-declaration. A complex entity instance is an instance
whose description involves more than one entity-declaration, even when
only one of them contains explicit attributes.  A simple entity
instance can be an instance of a supertype, as long as it is not an
instance of any subtype, but an instance of a subtype is always
&quot;complex&quot;.</P>

<P>Only the explicit attributes of an EXPRESS entity are mapped to the
exchange structure.  Special provisions, however, apply to OPTIONAL
explicit attributes (see <A href="#clause-12-2-2">12.2.2</A>),
explicit attributes whose values are entity instances
(see <A href="#clause-12-2-4">12.2.4</A>), and all redeclarations of
explicit attributes
(see <A href="#clause-12-2-6">12.2.6</A>, <A href="#clause-12-2-7">12.2.7</A>,
and <A href="#clause-12-2-8">12.2.8</A>)</P>
<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; More than one such provision may
apply to the same attribute.</P>


<H4><A NAME="clause-12-2-1"></A>12.2.1 Mapping of a simple entity instance</H4>



<P>A simple entity instance shall be mapped as a
SIMPLE_ENTITY_INSTANCE in the exchange structure.  The entity data
type name shall be mapped to the KEYWORD of the SIMPLE_RECORD, as
specified in <A href="#clause-12-2-11">12.2.11</A>.</P>

<P>Each explicit attribute shall be mapped directly to a PARAMETER of
the SIMPLE_RECORD in the exchange structure.  The order of the
PARAMETERs in the exchange structure shall be the same as the order of
the corresponding attributes in the EXPRESS entity declaration. The
first PARAMETER shall be the value of the first explicit attribute;
the second PARAMETER shall be the value of the second explicit
attribute, and so on.  If the EXPRESS entity data type has no explicit
attributes, the PARAMETER_LIST shall be empty.</P>

<P>The form of each PARAMETER shall depend on the data type of the
corresponding attribute, as specified
in <A href="#clause-12-1">12.1</A>.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		Definition in EXPRESS:</P>

<PRE CLASS="example">
TYPE
  primary_colour_abbreviation = ENUMERATION OF (r, g, b);
END_TYPE;

ENTITY widget; -----------------------------&gt;  A
  attribute1: INTEGER; ---------------------&gt;  B
  attribute2: STRING;  ---------------------&gt;  C
  attribute3: LOGICAL; ---------------------&gt;  D
  attribute4: BOOLEAN; ---------------------&gt;  E
  attribute5: REAL; ------------------------&gt;  F
  attribute6: LIST [1 : 2] of LOGICAL;  ----&gt;  G
  attribute7: ARRAY [-1:3]  of INTEGER;  ---&gt;  H
  attribute8: PRIMARY_COLOUR_ABBREVIATION; -&gt;  I
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#1 = <U>WIDGET</U>( <U>1</U>, <U>'A'</U>, <U>.T.</U>, <U>.F.</U>, <U>1.0</U>, <U>(.T.,.F.)</U>, <U>(1,0,1,2,3)</U>, <U>.R.</U>);
        ^    ^   ^    ^    ^    ^       ^           ^        ^
        |    |   |    |    |    |       |           |        |
        A    B   C    D    E    F       G           H        I
</PRE>

<P CLASS="example">
A: The EXPRESS entity name widget is mapped to the WIDGET standard
keyword of the data section entity.</P>
<P CLASS="example">
B: attribute1 has a value of 1 in this entity instance.</P>
<P CLASS="example">
C: attribute2 has a value of A in this entity instance.</P>
<P CLASS="example">
D: attribute3 has a value of T in this entity instance.</P>
<P CLASS="example">
E: attribute4 has a value of F in this entity instance.</P>
<P CLASS="example">
F: attribute5 has a value of 1.0 in this entity instance.</P>
<P CLASS="example">
G: attribute6 is a list of logicals in this entity instance. The list
values are:</P>

<PRE CLASS="example">
ATTRIBUTE6(1) = T
ATTRIBUTE6(2) = F
</PRE>

<P CLASS="example">
H: attribute 7 is an array of integers in this entity instance. The
array values are:</P>

<PRE CLASS="example">
ATTRIBUTE7(-1) = 1
ATTRIBUTE7( 0) = 0
ATTRIBUTE7( 1) = 1
ATTRIBUTE7( 2) = 2
ATTRIBUTE7( 3) = 3
</PRE>

<P CLASS="example">
I: Attribute 8 is an enumeration. The attribute contains a value of
R.</P>


<H4><A NAME="clause-12-2-2"></A>12.2.2 Mapping of OPTIONAL explicit attributes</H4>

<P>An explicit attribute that is declared to be OPTIONAL is not
required to have a value in a given entity instance.  When the
optional value is supplied in an entity instance, it shall be encoded
according to the data type of the attribute, as specified
in <A href="#clause-12-1">12.1</A>.  When the optional value is not
supplied in an entity instance, the missing attribute value shall be
encoded in the exchange structure as the <EM>dollar sign</EM>
&quot;$&quot;.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>

<PRE CLASS="example">
ENTITY xxx;
  attribute1: REAL;
  attribute2: REAL;
END_ENTITY;

ENTITY yyy;  ------------------------&gt;  A
  attribute1: OPTIONAL LOGICAL; -----&gt;  B
  attribute2: xxx;  -----------------&gt;  C
  attribute3: xxx;  -----------------&gt;  D
  attribute4: OPTIONAL INTEGER; -----&gt;  E
  attribute5: OPTIONAL REAL;  -------&gt;  F
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instances in data section:</P>

<PRE CLASS="example">
#1=XXX(1.0,2.0);
#2=XXX(3.0,4.0);
#3=<U>YYY</U>(<U>$</U>,<U>#2</U>,<U>#1</U>,<U>$</U>,<U>$</U>);
    ^  ^  ^  ^ ^ ^
    |  |  |  | | |
    A  B  C  D E F
</PRE>

<P CLASS="example">
A: The EXPRESS entity name yyy is mapped to the YYY standard keyword
of the data section entity.</P>
<P CLASS="example">
B: attribute1 does not have a value in this entity instance.</P>
<P CLASS="example">
C: attribute2 is a reference to the xxx entity with entity instance
#2.</P>
<P CLASS="example">
D: attribute3 is a reference to the xxx entity with entity instance
#1.</P>
<P CLASS="example">
E: attribute4 does not have a value in this entity instance.</P>
<P CLASS="example">
F: attribute5 does not have a value in this entity instance.</P>


<H4><A NAME="clause-12-2-3"></A>12.2.3 Mapping of derived attributes</H4>

<P>The derived attributes of an entity shall not be mapped to the exchange structure. When a derived attribute in a subtype 
redeclares an attribute in a supertype, the mapping used shall be as described in <A href="#clause-12-2-6">12.2.6</A>.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY yyy;
  q0: Real;
  q1: Real;
  q2: Real;
END_ENTITY;

ENTITY xxx;   ---------------------------&gt;  A
  p0: yyy;    ---------------------------&gt;  B
  p1: yyy;    ---------------------------&gt;  C
  p2: yyy;    ---------------------------&gt;  D
DERIVE
  attrib5 : vector := func_normal (p0,p1,p2);  ----&gt;  E
  attrib4 : real   := func_diameter (p0,p1,p2);  --&gt;  F
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instances in data section:</P>

<PRE CLASS="example">
#9  = YYY( 0.0, 0.0, 0.0);
#10 = YYY( 1.0, 2.0, 3.0);
#11 = YYY( 4.0, 5.0, 6.0);
#12 = <U>XXX</U>( <U>#9</U>, <U>#10</U>, <U>#11</U>);
       ^    ^   ^    ^
       |    |   |    |
       A    B   C    D
</PRE>

<P CLASS="example">
A: The EXPRESS entity name xxx is mapped to the standard keyword of
the data section entity.</P>
<P CLASS="example">
B: p0 is a reference to the yyy entity with an entity instance #9.</P>
<P CLASS="example">
C: p1 is a reference to the yyy entity with an entity instance
#10.</P>
<P CLASS="example">
D: p3 is a reference to the yyy entity with an entity instance
#11.</P>
<P CLASS="example">
E: attrib5 does not map to the entity instance because it is a derived
attribute.</P>
<P CLASS="example">
F: attrib4 does not map to the entity instance because it is a derived
attribute.</P>


<H4><A NAME="clause-12-2-4"></A>12.2.4 Mapping of attributes whose values are entity instances</H4>

<P>If an entity instance is specified as an attribute of a second
(referencing) entity instance, the first (referenced) entity instance
shall be mapped to the exchange structure as an instance name
(see <A href="clause6.htm#clause-6-4-4">6.4.4</A>). The referenced entity
instance shall be defined within the EXPRESS schema, the reference section or one of the data sections, i.e. somewhere
within the EXPRESS schema, reference or data sections the referenced entity instance shall occur on
the left of the <EM>equals sign</EM> &quot;=&quot;. This definition
may precede or follow the use of the entity instance as an attribute.
The definition need not occur within the same data section as the use
of the entity instance as an attribute.</P>

<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As per <A href=clause6.htm#clause-6-4-4-1>6.4.4.1</A>
if the referenced instance is defined by an EXPRESS constant then the
first character of its name will be an UPPER letter.
</P>

<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A HREF="annexE.htm">Annex E</A>
describes methods for evaluating schema conformance when an exchange
structure contains multiple data sections based on different EXPRESS
schemas, including the validity of references among entity instances
defined in data sections based on different EXPRESS schemas. </P>

<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>


<PRE CLASS="example">
ENTITY yyy;
  x : REAL;
  y : REAL;
  z : REAL;
END_ENTITY;

ENTITY xxx;
  p0 :  yyy;  --------------&gt;  A
  p1 :  yyy;  --------------&gt;  B
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section: 
</P>

<PRE CLASS="example">
#1 = YYY(3., 4., 5.);
#2 = XXX (#1, #3);
#3 = YYY (1., 2., 3.);
</PRE>

<H4><A NAME="clause-12-2-5"></A>12.2.5 Entities defined as subtypes of other entities</H4>

<P>ISO 10303-11 defines instances of an entity having a SUBTYPE clause
to be &quot;complex entity instances&quot;, in that they may involve
attributes from more than one entity-type declaration.  This subclause
specifies how complex entity instances are mapped to the exchange
structure.</P>

<P>Complex entity instances shall be mapped to the exchange structure
using one of two mapping rules, internal mapping or external mapping.
One mapping rule applies to each instance of a subtype entity.  The
selection of which mapping rule to use for each entity instance is
prescribed by <A href="#clause-12-2-5-1">12.2.5.1</A>.</P>


<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The selection of mapping depends
on the entity instance rather than the entity type.  It is possible
for different instances of the same entity data type to use different
mappings, depending on whether they are instances of subtypes and
which subtypes they instantiate.</P>
<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This subclause
applies <EM>only</EM> to complex entity instances.  It does not
necessarily apply to every instance of a supertype entity.  In
particular, it does not apply to an instance of a supertype that is
not an instance of any subtype.  Such instances may exist if the
supertype is not an abstract supertype and is not itself a subtype of
some other entity.  Such instances are mapped as provided
in <A href="#clause-12-2-1">12.2.1</A>.</P>



<H5><A NAME="clause-12-2-5-1"></A>12.2.5.1 Selection of mapping</H5>

<P>A set of entity data type definitions that are linked by subtype
and implicit or explicit supertype expressions define a set of complex
entity instance structures, referred to as the evaluated set in annex
B of ISO 10303-11. Each member of the evaluated set specifies a list
of entity data type names.</P>

<P>Each particular instance of an entity data type corresponds to one
member of the evaluated set. The mapping that may be applied to a
particular instance depends on the member of the evaluated set to
which it corresponds.</P>

<P>To determine the mapping rules to apply to a given entity
instance:</P>

<UL>
<LI>a) determine the list of entity data type names that are included
in the evaluated set member that corresponds to the entity
instance;</LI>
<LI>b) identify from the list all entity-types that have no subtypes
and all entity-types that may have subtypes but for which none of the
subtypes appears in the list (evaluated set member) for this
instance;</LI>
<LI>c) if only one entity data type has been identified, this
entity-type is referred to as the &quot;leaf entity data type&quot;
and the internal mapping shall be used. Otherwise the external mapping
shall be used.</LI>
</UL>

<P CLASS="example">
NOTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; At least one entity data type will
be identified in step b above.</P>


<H5><A NAME="clause-12-2-5-2"></A>12.2.5.2 Internal mapping</H5>

<P>If the internal mapping is used, the entity instance shall be
mapped to a SIMPLE_ENTITY_INSTANCE
(see <A HREF="clause5.htm#table-3">Table 3</A>).  The KEYWORD shall
encode the name of the leaf entity data type, as specified
in <A href="#clause-12-2-11">12.2.11</A>.  The
PARAMETER_LIST shall encode the values of the inherited explicit
attributes of all supertype entities and the explicit attributes of
the leaf entity data type. The order in which the inherited and
explicit attributes appear in the exchange structure shall be
determined as follows:</P>
<UL>
<LI>all inherited attributes shall appear sequentially prior to the
explicit attributes of any entity</LI>
<LI>the attributes of a supertype entity shall be inherited in the
order they appear in the supertype entity itself;</LI>
<LI>if the supertype entity is itself a subtype of another entity,
then the attributes of the higher supertype entity shall be inherited
first;</LI>
<LI>when multiple supertype entities are specified, the attributes of
supertype entities shall be processed in the order specified in the
SUBTYPE OF expression.</LI>
</UL>


<P>This procedure may result in a supertype entity being referenced
more than once. In this case all references after the first one shall
be ignored.</P>
<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An example of a simple
subtype/supertype relationship. Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY aa ABSTRACT SUPERTYPE OF (ONEOF(bb,cc));  ------&gt;  A
  attrib_a: zz;  --------------------------------------&gt;  B
END_ENTITY;

ENTITY bb SUBTYPE OF (aa)
        ABSTRACT SUPERTYPE OF (ONEOF(xx)); ------------&gt;  C
  attrib_b1: yy;  -------------------------------------&gt;  D
  attrib_b2: yy;  -------------------------------------&gt;  E
END_ENTITY;

ENTITY cc SUBTYPE OF (aa);
  attrib_c : REAL;
END_ENTITY;

ENTITY xx SUBTYPE OF (bb);
  attrib_x:  REAL;  -----------------------------------&gt;  F
END_ENTITY;

ENTITY zz;
  attrib_z : STRING;
END_ENTITY;

ENTITY yy;
  attrib_1 : REAL;
  attrib_2 : REAL;
  attrib_3 : REAL;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance of entity data type xx in data section:</P>

<PRE CLASS="example">
#1 = ZZ('ZATTR');
#2 = YY(1.0, 2.0, 0.0);
#3 = YY(2.0, 2.0, 0.0);

#4 = XX(<U>#1</U>, <U>#2</U>, <U>#3</U>, <U>4.0</U>);
         ^   ^   ^   ^
         |   |   |   |
         B   D   E   F
</PRE>

<P CLASS="example">
A: Because entity aa is an abstract supertype it does not map to the
exchange structure.</P>
<P CLASS="example">
B: The attribute attrib_a will map to the data section as an inherited
attribute in an entity that is directly or indirectly subtyped to the
aa entity. In this case, attrib_a is represented by the first
attribute of the instance of xx, and refers to zz, entity instance
#1.</P>
<P CLASS="example">
C: Because entity bb is an abstract supertype it will not map to the
exchange structure.</P>
<P CLASS="example">
D: The attribute attrib_b1 will map to the data section as an
inherited attribute in an entity that is directly or indirectly
subtyped to the bb entity. In this case, attrib_b1 is represented by
the second attribute of the instance of entity xx, and refers to yy,
entity instance #2.</P>
<P CLASS="example">
E: The attribute attrib_b2 will map to the data section as an
inherited attribute in an entity that is directly or indirectly
subtyped to the bb entity. In this case, attrib_b2 is represented by
the third attribute of the instance of entity xx, and refers to yy,
entity instance #3.</P>
<P CLASS="example">
F: Attribute attrib_x is represented by its value 4.0 .</P>
<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An example of the mapping of a
supertype that is not an ABSTRACT supertype. Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY aa SUPERTYPE OF (ONEOF(bb,dd));  --&gt;  A
  attrib_a :  STRING;
END_ENTITY;

ENTITY bb SUBTYPE OF (aa); ---------------&gt;  B
END_ENTITY;

ENTITY cc SUBTYPE OF (bb);  --------------&gt;  C
  attrib_c :  INTEGER;
END_ENTITY;

ENTITY dd SUBTYPE OF (aa);  --------------&gt;  D
  attrib_d : REAL;
END_ENTITY;

ENTITY ee ;  -----------------------------&gt;  E
  attrib_e : aa;
END_ENTITY;
</PRE>
<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#1 = AA('SAMPLE STRING');  ---------------&gt;  A 
#2 = BB('ABC');  -------------------------&gt;  B 
#3 = CC('DEF', 123);   -------------------&gt;  C 
#4 = DD('XYZ', 99.99); -------------------&gt;  D 
#5 = EE(#1); -----------------------------&gt;  E 
#6 = EE(#2); -----------------------------&gt;  E 
#7 = EE(#3); -----------------------------&gt;  E 
#8 = EE(#4); -----------------------------&gt;  E 
</PRE>

<P CLASS="example">
A: Since it was not an abstract supertype, the supertype entity aa can
be instantiated in an exchange structure and notice that it contains
only its attrib_a attribute when it is instantiated.</P>
<P CLASS="example">
B: The entity bb is a subtype of aa and therefore its instances will
contain the attributes of both aa and bb, but since entity bb does not
define any attributes the parameter list will only contain
attrib_a.</P>
<P CLASS="example">
C: The entity cc is a subtype of bb and therefore its instances will
contain the attributes of aa, bb, and cc.</P>
<P CLASS="example">
D: The entity dd is a subtype of aa and therefore its instances will
contain the attributes of both aa and dd.</P>
<P CLASS="example">
E: The entity ee references entity aa as an attribute. Therefore, an
instance of entity ee may reference any of #1, #2, #3 or #4.</P>
<P CLASS="example">
EXAMPLE 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An example of the mapping of
an entity with multiple supertypes in the SUBTYPE OF
expression. Entity definition in EXPRESS:</P>


<PRE CLASS="example">
ENTITY base SUPERTYPE OF (branch_one,branch_two);  ---&gt;  A
  attrib_a :  STRING;
END_ENTITY;

ENTITY branch_one SUBTYPE OF (base); -----------------&gt;  B
  attrib_b :  INTEGER;
END_ENTITY;

ENTITY branch_two SUBTYPE OF (base);  ----------------&gt;  C
  attrib_c :  BOOLEAN;
END_ENTITY;

ENTITY leaf SUBTYPE OF (branch_one, branch_two);  ----&gt;  D
  attrib_d : REAL;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#1 = BASE('SAMPLE STRING');  -------------------------&gt;  A 
#2 = BRANCH_ONE('ABC', 123);  ------------------------&gt;  B 
#3 = BRANCH_TWO('DEF', .T.);   -----------------------&gt;  C 
#4 = LEAF('XYZ', 123, .T., 99.99); -------------------&gt;  D 
</PRE>

<P CLASS="example">
A: Entity base has no supertypes.  When instantiated in an exchange
structure, its parameter list will contain only a value for the
attrib_a attribute.</P>
<P CLASS="example">
B: The entity branch_one is a subtype of base. When instantiated in an
exchange structure, its parameter list will contain the inherited
attributes of base followed by the attributes of branch_one.</P>
<P CLASS="example">
C: The entity branch_two is a subtype of base. When instantiated in an
exchange structure, its parameter list will contain the inherited
attributes of base followed by the attributes of branch_two.</P>
<P CLASS="example">
D: The entity leaf is a subtype of branch_one and branch_two. When
instantiated in an exchange structure, its parameter list will contain
the inherited attributes of branch_one, which includes the attributes
of base, followed by the inherited attributes of branch_two, followed
by the attributes of leaf.  The attributes of base are only written
once, while writing the attributes of branch_one.  They are ignored
when they are encountered a second time when writing the attributes of
branch_two.</P>


<H5><A NAME="clause-12-2-5-3"></A>12.2.5.3 External mapping</H5>

<P>If the external mapping is used, the entity instance shall be
mapped to a COMPLEX_ENTITY_INSTANCE
(see <A HREF="clause5.htm#table-3">Table 3</A>).</P>

<P>ISO 10303-11 defines a &quot;partial (complex) entity value&quot;
to be the set of attribute values described by a single EXPRESS entity
declaration.  Every entity data type name in the evaluated set member
identifies a partial complex entity value of the entity instance.
Thus, the evaluated set member identifies the set of partial complex
entity values that, together with the instance name, completely
describe the entity instance.</P>

<P>Every partial complex entity value identified by an entity data
type name in the evaluated set member shall be mapped to a
SIMPLE_RECORD within the SUBSUPER_RECORD.
The order of SIMPLE_RECORDs within the SUBSUPER_RECORD shall be in
ascending sequence of their entity data type names.  The names shall
be collated as UPPER and DIGIT characters using the octet values
defined in <A href="clause5.htm#clause-5-2">5.2</A>.</P>

<P>Each SIMPLE_RECORD shall encode one partial complex entity
value. In each SIMPLE_RECORD, the KEYWORD shall encode the
corresponding entity data type name, as specified
in <A href="#clause-12-2-11">12.2.11</A>, and the PARAMETER_LIST shall
encode the values of the explicit attributes, if any, appearing in the
corresponding entity declaration.  The order of the PARAMETERs in the
exchange structure shall be the same as the order of the corresponding
attributes in the EXPRESS entity declaration.  If the EXPRESS entity
declaration contains no explicit attributes, the PARAMETER_LIST shall
be empty.  The form of each PARAMETER shall depend on the data type of
the corresponding attribute, as specified
in <A href="#clause-12-1">12.1</A>.</P>
<P CLASS="example">
NOTE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The sequence of partial entity
values (SIMPLE_RECORDs) is determined by the entity data type name
(the so-called &quot;long name&quot;) and not by the &quot;short
name&quot;, if provided, which may be used for the encoding.</P>
<P CLASS="example">
NOTE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Every partial entity value in the
evaluated set is required to appear, including supertypes which have
no explicit attributes.</P>
<P CLASS="example">
EXAMPLE 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An example of the mapping of
subtypes related by ANDOR.</P>
<P CLASS="example">
Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY aa SUPERTYPE OF (bb ANDOR cc);  --&gt;  A
  attrib_a :  STRING;
END_ENTITY;

ENTITY bb SUBTYPE OF (aa); --------------&gt;  B
  attrib_b :  INTEGER;
END_ENTITY;

ENTITY cc SUBTYPE OF (aa);  -------------&gt;  C
  attrib_c : REAL;
END_ENTITY;

ENTITY dd ;  ----------------------------&gt;  D
  attrib_d : aa;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section:</P>

<PRE CLASS="example">
#1 = BB('sample string', 15);   ------------&gt; A 
#2 = CC('S', 3.0);  ------------------------&gt; B 
#3 = (AA('ASTRID')BB(17)CC(4.0));  ---------&gt; C 
#4 = DD(#1);  ------------------------------&gt; D 
#5 = DD(#2);  ------------------------------&gt; D 
#6 = DD(#3);  ------------------------------&gt; D 
#7 = AA('ABC');  ---------------------------&gt; E 
</PRE>

<P CLASS="example">
A: #1 is an instance of aa and bb combined.</P>
<P CLASS="example">
B: #2 is an instance of aa and cc combined.</P>
<P CLASS="example">
C: #3 is an instance of aa, bb and cc combined.</P>
<P CLASS="example">
D: The entity dd references entity aa as an attribute. Therefore, an
instance of entity dd may legally reference any of #1, #2 or #3.</P>
<P CLASS="example">
E: The non-abstract supertype aa can be instantiated, and the internal
mapping applies because the evaluated set contains only one
member.</P>
<P CLASS="example">
EXAMPLE 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An example of the mappings of
a more complicated subtype/supertype graph. Entity definition in
EXPRESS:</P>


<PRE CLASS="example">
ENTITY x;
  attrib_x : INTEGER;
END_ENTITY;

ENTITY a ABSTRACT SUPERTYPE OF(ONEOF(b,c));  --&gt;  A
  attrib_a : x  -------------------------------&gt;  B
END_ENTITY;

ENTITY b SUPERTYPE OF(d ANDOR e)
	SUBTYPE OF (a);
  attrib_b : REAL;  ---------------------------&gt;  B
END_ENTITY;

ENTITY c SUBTYPE OF (a);  ---------------------&gt;  C
  attrib_c : REAL;
END_ENTITY;

ENTITY d SUBTYPE OF (b);  ---------------------&gt;  D
  attrib_d : x;
END_ENTITY;

ENTITY e ABSTRACT SUPERTYPE
	   SUBTYPE OF (b);  ------------------------&gt;  A
  attrib_e : x;  ------------------------------&gt;  B
END_ENTITY;

ENTITY f SUPERTYPE OF (h);
  attrib_f : x;  ------------------------------&gt;  B
END_ENTITY;

ENTITY g SUBTYPE OF (e);  ---------------------&gt;  E
  attrib_g : INTEGER;
END_ENTITY;

&nbsp;
ENTITY h SUBTYPE OF (e,f);  -------------------&gt;  E
  attrib_h : INTEGER;
END_ENTITY;
</PRE>

<P CLASS="example">
A:	Since entity a and e are abstract supertypes they cannot occur on the exchange structure as independent instances.</P>
<P CLASS="example">
B:	Since attrib_a, attrib_b, attrib_e and attrib_f are attributes of supertype entities, they will be mapped as inherited attributes if a subtype is mapped using the internal mapping. They will be mapped as attributes of the entities in which they are declared if a subtype is mapped using the external mapping.</P>
<P CLASS="example">
C:	Since entity c participates in an ONEOF operation and its supertype participates in no supertype operation, it will use the internal mapping.</P>
<P CLASS="example">
D:	The mapping of d will depend on the structure of the evaluated set in which it appears.</P>
<P CLASS="example">
E:	Since entities g and h both have a supertype (entity e) that participates in an ANDOR operation. their mapping will depend on the structure of the evaluated set in which they appear.</P>
<P CLASS="example">
EXAMPLE 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; An entity instance showing internal mapping.</P>

<PRE CLASS="example">
#1=X(1);
#2=<U>C</U>(<U>#1</U>, <U>2.0</U>);
   ^  ^   ^
   |  |   |
   A  B   C
</PRE>

<P CLASS="example">
A: The evaluated set of '#2' is [c &amp; a] and therefore uses the
internal mapping.</P>
<P CLASS="example">
B: attrib_a is inherited by entity data type c. The evaluated set is a
reference to an instance of entity data type x.</P>
<P CLASS="example">
C: attrib_c appears after all inherited attributes.</P>
<P CLASS="example">
EXAMPLE 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity instance showing
internal mapping:</P>

<PRE CLASS="example">
#4=X(3);
#1=X(1);
#2=<U>D</U>(<U>#1</U>, <U>2.0</U>, <U>#4</U>)
   ^  ^   ^    ^
   |  |   |    |
   A  B   C    D
</PRE>

<P CLASS="example">
A: Since entity instance #2 belongs to the evaluated set [a &amp; b
&amp; d] that has exactly one leaf (d), it is internally mapped.</P>
<P CLASS="example">
B: The attribute of a with name attrib_a is inherited by entity data
type d.</P>
<P CLASS="example">
C: attrib_b is inherited by entity data type d.</P>
<P CLASS="example">
D: attrib_d is the last attribute in the d instance because inherited
attributes from the supertype entities a and b come first.</P>
<P CLASS="example">
EXAMPLE 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity instance showing
external mapping:</P>

<PRE CLASS="example">
#1=X(1);
#2=(A(#1) B(9.0) D(#1) E(#1) F(#1) H(4) );  -------------&gt; A 
</PRE>

<P CLASS="example">
A: Since entity instance #2 is a member of [a &amp; b &amp; d &amp; e
&amp; f &amp; h] and this evaluated set has more than one leaf (d and
h), external mapping is used. There is no single entity data type name
that can be associated with the entity; rather it can be considered to
have the composite name a-b-d-e-f-h. The <EM>spaces</EM> between the
entity records are optional and have been added to this example for
ease of reading.</P>


<H4><A NAME="clause-12-2-6"></A>12.2.6 Explicit attributes redeclared as DERIVEd</H4>

<P>If a subtype entity redeclares an attribute of its supertype using
the DERIVE clause and if the original attribute is an explicit
attribute, the value of the original attribute in the supertype shall
be encoded as an <EM>asterisk</EM> (&quot;*&quot;).</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>


<PRE CLASS="example">
ENTITY point;
  x : REAL;
  y : REAL;
  z : REAL;
END_ENTITY;

ENTITY point_on_curve SUBTYPE OF (point);
  u : REAL;
  c : curve;
DERIVE
  SELF&#92;point.x : real := fx(u, c);
  SELF&#92;point.y : real := fy(u, c);
  SELF&#92;point.z : real := fz(u, c);
END_ENTITY;

ENTITY curve;
  attr : STRING;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section</P>

<PRE CLASS="example">
#1 = CURVE('curve_attribute');
#2 = POINT_ON_CURVE( *, *, *, 0.55, #1);  -----------&gt; A 
#3 = POINT(2.0, 3.0, 4.0);  -------------------------&gt; B 
</PRE>

<P CLASS="example">
A: Because a subtype with derived attributes is used here, the
attributes x, y and z are replaced by <EM>asterisks</EM>.</P>
<P CLASS="example">
B: Because POINT is not an ABSTRACT SUPERTYPE, it is possible to have
an instance of POINT in the exchange structure. The attributes x, y,
and z appear as normal.</P>


<H4><A NAME="clause-12-2-7"></A>12.2.7 Attributes redeclared as INVERSE</H4>

<P>If a subtype entity redeclares an attribute of its supertype using
the INVERSE clause, there is no effect on the encoding.  The
redeclared attribute is not encoded in any way.</P>


<H4><A NAME="clause-12-2-8"></A>12.2.8 Attributes redeclared as explicit attributes</H4>

<P>If a subtype entity redeclares an attribute of one of its
supertypes as an explicit attribute, i.e. not in a DERIVE clause nor
an INVERSE clause, there is no effect on the encoding.  </P>

<P>The attribute value shall be encoded as an attribute of the
supertype, as specified in <A href="#clause-12-2-5">12.2.5</A>,
applying the mapping specified in <A href="clause12.htm">clause 12</A>
for the data type of the attribute in the supertype.  The redeclared
attribute shall be ignored, that is, it shall not be considered an
attribute of the subtype for encoding purposes.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity definition in
EXPRESS:</P>

<PRE CLASS="example">
ENTITY aaa SUPERTYPE OF (ONEOF (bbb, ccc));
  a1    : NUMBER;
  a2    : curve;
INVERSE
  a3    : SET OF mmm FOR m1;
END_ENTITY;

ENTITY bbb SUBTYPE OF (aaa);
  SELF&#92;aaa.a1   : INTEGER;
  b             : REAL;
END_ENTITY;

ENTITY ccc SUBTYPE OF (aaa);
  SELF&#92;aaa.a2   : line;
INVERSE
  SELF&#92;aaa.a3   : SET [1:2] OF mmm FOR m1;
END_ENTITY;

ENTITY curve;
  ...
END_ENTITY;

ENTITY line SUBTYPE OF (curve);
  ...
END_ENTITY;

ENTITY mmm;
  m1    : aaa;
END_ENTITY;
</PRE>

<P CLASS="example">
Sample instantiation in data section:</P>

<PRE CLASS="example">
#1 = LINE(...);
#2 = CURVE(...);
#3 = BBB(1.0, #2, 0.5);
#4 = CCC(1.5, #1);
</PRE>

<P CLASS="example">
For the instances #3 and #4 the encoding is the same as if there were
no redeclared attributes in the entities bbb and ccc.</P>


<H4><A NAME="clause-12-2-9"></A>12.2.9 Entity local rules</H4>

<P>Entity local rules, WHERE rules and UNIQUE rules, shall not be
mapped to the exchange structure.</P>
<P CLASS="example">
EXAMPLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;		Entity definition in EXPRESS:</P>

<PRE CLASS="example">
ENTITY widget; -----------------------&gt;  A
  a : REAL; --------------------------&gt;  B
  b : REAL; --------------------------&gt;  C
  c : REAL; --------------------------&gt;  D
WHERE
  a ** 2 + b ** 2 + c ** 2 = 3.0; ----&gt;  E
END_ENTITY;
</PRE>

<P CLASS="example">
Sample entity instance in data section.:</P>
<P CLASS="example">
The WHERE rules are not instantiated in the entity instance.</P>

<PRE CLASS="example">
#2 = <U>WIDGET</U>( <U>1.0</U>, <U>1.0</U>, <U>2.0</U> );
        ^     ^    ^    ^
        |     |    |    |
        A     B    C    D
</PRE>

<P CLASS="example">
A: The EXPRESS entity name widget is mapped to the entity data type
keyword of the data section entity.</P>
<P CLASS="example">
B: Attribute a has a value of 1.0 in the entity instance.</P>
<P CLASS="example">
C: Attribute b has a value of 1.0 in the entity instance.</P>
<P CLASS="example">
D: Attribute c has a value of 2.0 in the entity instance.</P>
<P CLASS="example">
E: The WHERE rule did not map to the exchange structure. The entity is
syntactically correct. However, the WHERE rule is not satisfied by the
values of the three attributes.</P>


<H4><A NAME="clause-12-2-10"></A>12.2.10 Mapping of INVERSE attributes</H4>

<P>Attributes within the INVERSE clause shall not be mapped to the
exchange structure.</P>


<H4><A NAME="clause-12-2-11"></A>12.2.11 Encoding of entity type names</H4>

<P>If the document that defines the schema whose instances are the
subject of a data section also defines a set of short names for each
of the entity data types within that schema, these short names may be
used as the encoding of the entity data type names. Otherwise, the
encoding of the entity data type names shall be the entity data type
names themselves. In either case, any small letters shall be converted
to their corresponding capital letters, i.e., the encoding shall not
contain any small letters.</P>


<H3><A NAME="clause-12-3"></A>12.3 Mapping of the EXPRESS element of SCHEMA</H3>

<P>The EXPRESS element of SCHEMA shall not be mapped to the exchange
structure. The name of the schema that specifies entities that appear
in an exchange structure shall be mapped to the header section of the
exchange structure by use of an instance of the <B>file_schema</B>
entity data type as specified
in <A href="clause8.htm#clause-8-2-4">8.2.4</A>.</P>


<H3><A NAME="clause-12-4"></A>12.4 Mapping of the EXPRESS element of CONSTANT</H3>

<P>Each reference to an EXPRESS element of CONSTANT shall be mapped to a 
constant instance name (see <A href="clause6.htm#clause-6-4-4-1">6.4.4.1</A>) or a constant value
name (see <A href="clause6.htm#clause-6-4-4-2">6.4.4.2</A>).</P>


<H3><A NAME="clause-12-5"></A>12.5 Mapping of the EXPRESS element of RULE</H3>

<P>The EXPRESS element of RULE shall not be mapped to the exchange
structure.</P>


<H3><A NAME="clause-12-6"></A>12.6 Remarks</H3>

<P>Remarks shall not be mapped to the exchange structure.</P>


<p class=pagefoot>&copy; ISO 2016 &mdash; All rights reserved
</body>
</html>

